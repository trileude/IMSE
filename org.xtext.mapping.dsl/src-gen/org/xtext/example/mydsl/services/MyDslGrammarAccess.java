/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ListeQuestionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListeQuestions");
		private final Assignment cQuestionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQuestionsQuestionParserRuleCall_0 = (RuleCall)cQuestionsAssignment.eContents().get(0);
		
		//ListeQuestions:
		//	questions+=Question*;
		public ParserRule getRule() { return rule; }

		//questions+=Question*
		public Assignment getQuestionsAssignment() { return cQuestionsAssignment; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_0() { return cQuestionsQuestionParserRuleCall_0; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdSTRINGTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Question:
		//	id=STRING ":" type=Type "!";
		public ParserRule getRule() { return rule; }

		//id=STRING ":" type=Type "!"
		public Group getGroup() { return cGroup; }

		//id=STRING
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_0_0() { return cIdSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_3() { return cExclamationMarkKeyword_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRadioKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTextAreaKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDropDownKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCheckBoxKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Type:
		//	"Radio" | "Text" | "TextArea" | "DropDown" | "CheckBox";
		public ParserRule getRule() { return rule; }

		//"Radio" | "Text" | "TextArea" | "DropDown" | "CheckBox"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Radio"
		public Keyword getRadioKeyword_0() { return cRadioKeyword_0; }

		//"Text"
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }

		//"TextArea"
		public Keyword getTextAreaKeyword_2() { return cTextAreaKeyword_2; }

		//"DropDown"
		public Keyword getDropDownKeyword_3() { return cDropDownKeyword_3; }

		//"CheckBox"
		public Keyword getCheckBoxKeyword_4() { return cCheckBoxKeyword_4; }
	}
	
	
	private ListeQuestionsElements pListeQuestions;
	private QuestionElements pQuestion;
	private TypeElements pType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ListeQuestions:
	//	questions+=Question*;
	public ListeQuestionsElements getListeQuestionsAccess() {
		return (pListeQuestions != null) ? pListeQuestions : (pListeQuestions = new ListeQuestionsElements());
	}
	
	public ParserRule getListeQuestionsRule() {
		return getListeQuestionsAccess().getRule();
	}

	//Question:
	//	id=STRING ":" type=Type "!";
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Type:
	//	"Radio" | "Text" | "TextArea" | "DropDown" | "CheckBox";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
